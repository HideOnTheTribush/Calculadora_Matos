# calculadora.py

# Funci√≥n que suma dos n√∫meros
def sumar(a: float, b: float):
    return a + b

# Funci√≥n que resta el segundo n√∫mero al primero
def restar(a: float, b: float):
    return a - b

# Funci√≥n que multiplica dos n√∫meros
def multiplicar(a: float, b: float):
    return a * b

# Funci√≥n que divide el primer n√∫mero entre el segundo
# Si el divisor es cero, devuelve un mensaje de error
def dividir(a: float, b: float):
    if b == 0:
        return "Error: No se puede dividir entre cero."
    return a / b

# Diccionario que asocia opciones con sus nombres y funciones
# Clave = n√∫mero del men√∫ 
# Valor = tupla con el nombre de la operaci√≥n y la funci√≥n correspondiente
# Ejemplo: '1' -> ("Sumar", sumar)// Donde '1' es la opci√≥n del men√∫, es decir, la clave y ("Sumar", sumar) es el valor
operaciones = {
    '1': ("Sumar", sumar),
    '2': ("Restar", restar),
    '3': ("Multiplicar", multiplicar),
    '4': ("Dividir", dividir)
}

# Funci√≥n para mostrar el men√∫ de operaciones disponibles
def mostrar_menu():
    print("\nSelecciona la operaci√≥n:")
    for clave, (nombre, _) in operaciones.items():
        print(f"{clave} - {nombre}")
    print("5 - Salir")  # Opci√≥n para salir del programa

# Funci√≥n reutilizable para pedir un n√∫mero al usuario
# Si el usuario escribe algo inv√°lido, se repite hasta que introduzca un n√∫mero correcto
def pedir_numero(texto: str) -> float:
    while True:
        try:
            return float(input(texto))
        except ValueError:
            print("‚ö†Ô∏è  Valor no v√°lido. Introduce un n√∫mero.")

# Funci√≥n principal del programa
def main():
    print("üìü Calculadora simple en Python")

    while True:
        # Mostrar men√∫ en cada vuelta del bucle
        mostrar_menu()

        # Pedir opci√≥n al usuario
        opcion = input("Opci√≥n: ")

        # Salir del programa si elige 5
        if opcion == '5':
            print("üëã Gracias por usar la calculadora.")
            break  # Rompe el bucle y termina el programa

        # Si la opci√≥n no est√° en el diccionario de operaciones, mostrar mensaje de error
        if opcion not in operaciones:
            print("‚ùå Opci√≥n no v√°lida.")
            continue  # Vuelve al principio del bucle

        # Pedir los dos n√∫meros para operar
        num1 = pedir_numero("Introduce el primer n√∫mero: ")
        num2 = pedir_numero("Introduce el segundo n√∫mero: ")

        # Buscar en el diccionario el nombre y la funci√≥n de la operaci√≥n elegida
        nombre, funcion = operaciones[opcion]

        # Ejecutar la funci√≥n con los n√∫meros proporcionados
        resultado = funcion(num1, num2)

        # Mostrar el resultado
        print(f"‚úÖ Resultado de {nombre.lower()}: {resultado}")

# Esta l√≠nea se asegura de que main() solo se ejecute si este archivo se ejecuta directamente
if __name__ == "__main__":
    main()
